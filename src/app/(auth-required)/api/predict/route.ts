// /app/api/predict/route.ts (Next.js 13+ App Router)
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

// üì° T·∫°o Supabase client (d√πng service key ƒë·ªÉ c√≥ quy·ªÅn ghi)
const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY! // ‚ö†Ô∏è PH·∫¢I D√ôNG service_role ƒë·ªÉ UPDATE
)

const AI_SERVER_URL = process.env.AI_SERVER_URL || 'http://localhost:10000'

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url)
    const symbol = searchParams.get('symbol')?.toUpperCase()

    if (!symbol) {
      return NextResponse.json({ error: '‚ùå Thi·∫øu m√£ c·ªï phi·∫øu (symbol)' }, { status: 400 })
    }

    // üîç Truy v·∫•n d·ªØ li·ªáu m·ªõi nh·∫•t cho symbol
    const { data, error } = await supabase
      .from('ai_signals')
      .select('*')
      .eq('symbol', symbol)
      .order('date', { ascending: false })
      .limit(1)

    if (error) {
      console.error('‚ùå L·ªói Supabase:', error.message)
      return NextResponse.json({ error: '‚ö†Ô∏è L·ªói truy v·∫•n Supabase' }, { status: 500 })
    }

    if (!data || data.length === 0) {
      return NextResponse.json({ error: '‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ n√†y.' }, { status: 404 })
    }

    const row = data[0]
    const date = row.date

    // ‚úÖ Ki·ªÉm tra ƒë·∫ßy ƒë·ªß c√°c feature c·∫ßn thi·∫øt
    const requiredFields = [
      'close', 'volume', 'ma20', 'rsi',
      'bb_upper', 'bb_lower',
      'foreign_buy_value', 'foreign_sell_value'
    ]

    for (const field of requiredFields) {
      if (row[field] === null || row[field] === undefined) {
        console.error(`‚ùå Thi·∫øu tr∆∞·ªùng d·ªØ li·ªáu: ${field}`)
        return NextResponse.json({
          error: `‚ùå Thi·∫øu tr∆∞·ªùng d·ªØ li·ªáu "${field}" trong Supabase cho m√£ ${symbol}`
        }, { status: 400 })
      }
    }

    const features = {
      close: Number(row.close),
      volume: Number(row.volume),
      ma20: Number(row.ma20),
      rsi: Number(row.rsi),
      bb_upper: Number(row.bb_upper),
      bb_lower: Number(row.bb_lower),
      foreign_buy_value: Number(row.foreign_buy_value),
      foreign_sell_value: Number(row.foreign_sell_value)
    }

    console.log(`üì° G·ª≠i d·ªØ li·ªáu t·ªõi AI server: ${AI_SERVER_URL}/predict`)
    console.log('üß† D·ªØ li·ªáu input:', features)

    const res = await fetch(`${AI_SERVER_URL}/predict`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(features)
    })

    const aiResult = await res.json()
    console.log('ü§ñ Ph·∫£n h·ªìi t·ª´ AI:', aiResult)

    if (!res.ok || !aiResult.probability || !aiResult.recommendation) {
      console.error('‚ùå L·ªói t·ª´ AI server:', aiResult)
      return NextResponse.json({ error: aiResult.error || '‚ö†Ô∏è AI kh√¥ng tr·∫£ k·∫øt qu·∫£ h·ª£p l·ªá' }, { status: 500 })
    }

    // üìù C·∫≠p nh·∫≠t l·∫°i b·∫£ng ai_signals
    const { error: updateError } = await supabase
      .from('ai_signals')
      .update({
        ai_predicted_probability: aiResult.probability,
        ai_recommendation: aiResult.recommendation
      })
      .eq('symbol', symbol)
      .eq('date', date)

    if (updateError) {
      console.error('‚ùå Kh√¥ng th·ªÉ ghi k·∫øt qu·∫£ v√†o Supabase:', updateError.message)
    } else {
      console.log('‚úÖ Ghi k·∫øt qu·∫£ AI th√†nh c√¥ng.')
    }

    return NextResponse.json({
      symbol,
      date,
      probability: aiResult.probability,
      recommendation: aiResult.recommendation
    })

  } catch (err: any) {
    console.error('üî• L·ªói server predict:', err.message || err)
    return NextResponse.json({ error: 'L·ªói n·ªôi b·ªô server.' }, { status: 500 })
  }
}
