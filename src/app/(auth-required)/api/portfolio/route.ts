// app/api/portfolio/route.ts
import { NextRequest, NextResponse } from 'next/server'

const AI_SERVER_URL = process.env.AI_SERVER_URL || 'http://localhost:10000'

export async function GET(req: NextRequest) {
  const { searchParams } = new URL(req.url)
  const userId = searchParams.get('userId')

  if (!userId) {
    return NextResponse.json(
      { error: '‚ùå Thi·∫øu userId!' },
      { status: 400 }
    )
  }

  try {
    console.log(`üì° G·ª≠i y√™u c·∫ßu ƒë·∫øn AI Flask /portfolio cho userId: ${userId}`)

    const flaskRes = await fetch(`${AI_SERVER_URL}/portfolio`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId })
    })

    const rawText = await flaskRes.text()
    console.log('üì• Ph·∫£n h·ªìi t·ª´ Flask:', rawText)

    let json: any
    try {
      json = JSON.parse(rawText)
    } catch (err) {
      console.error('‚ùå Flask kh√¥ng tr·∫£ JSON h·ª£p l·ªá:', rawText)
      return NextResponse.json(
        { error: 'üî• Flask tr·∫£ v·ªÅ n·ªôi dung kh√¥ng ph·∫£i JSON' },
        { status: 500 }
      )
    }

    if (!flaskRes.ok) {
      console.error('‚ùå Flask tr·∫£ l·ªói:', json)
      return NextResponse.json(
        { error: json.error || '‚ùå L·ªói kh√¥ng r√µ t·ª´ AI server' },
        { status: 500 }
      )
    }

    return NextResponse.json({ userId, ...json })

  } catch (err: any) {
    console.error('üî• L·ªói khi g·ªçi AI Flask:', err.message || err)
    return NextResponse.json(
      { error: '‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c t·ªõi AI Flask server' },
      { status: 500 }
    )
  }
}
